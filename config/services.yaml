imports:
    - { resource: 'sources.yaml' }
# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php,Lib}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Services\DataProviders\Factories\Config\ProviderConfigFactory:
        arguments:
            $config: '%sources%'
    App\Services\DataProviders\Factories\Config\YamlProviderConfig:
        arguments:
            $config: '%sources%'

    App\Services\DataProviders\Factories\Config\FactoryConfigInterface:
        factory: 'App\Services\DataProviders\Factories\Config\ProviderConfigFactory:createConfig'


    App\Services\DataProviders\JsonDataProvider:
        public: true
        arguments:
            $mappings: '%json_mapping%'

    App\Services\Fillers\FillerManager:
        calls:
            - [addFiller, ['@App\Services\Fillers\IceCastJsonFiller']]

